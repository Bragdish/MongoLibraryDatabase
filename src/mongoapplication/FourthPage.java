/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mongoapplication;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
//import static mongoapplication.SecondPage.conn;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Makubex
 */
public class FourthPage extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form FourthPage
     */
    int posx, posy;

    static Connection conn;
    /* book table */
    String book_id, title;
    /* borrower table */
    String card_no, fname, lname, address, phone;
    /* library_branch table */
    String branch_id, branch_name;
    /* book_authors */
    String author_name;
    /* book_copies */
    String no_of_copies;
    /* book_loans */
    String date_out, due_date;
    int linect = 0;
    String output = "";
    String card_id = "";
    int available = 0;
    String[] columnNames1 = {"Title", "Book ID", "Author Name", "Total", "Available"};
    String[] columnNames2 = {"Book ID", "Title", "Author Name"};

    DefaultTableModel model1, model2;
    String eno;
    int width = 800;
    int height = 500;
    String date = new SimpleDateFormat("yyyy-mm-dd").format(new Date());
    String date1 = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss").format(new Date());
    MongoClient mongoclient;

    public FourthPage() {

    }

    public FourthPage(String text) {
        super();
        eno = text;
        initComponents();
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        Double x = (screen.getWidth() - this.width) / 2;
        Double y = (screen.getHeight() - this.height) / 2;
        posx = x.intValue();
        posy = y.intValue();
        this.setLocation(posx, posy);
        this.setTitle("Transaction Window");
        //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        model1 = new DefaultTableModel();
        model1.setColumnIdentifiers(columnNames1);
        jTable1 = new javax.swing.JTable(model1);
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        model2 = new DefaultTableModel();
        model2.setColumnIdentifiers(columnNames2);
        jTable2 = new javax.swing.JTable(model2)
        ;
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel(date1);
        jButton8 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTextField7 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setText("Title");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Book ID");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Author Name");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Check Out");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(model1);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(262, 262, 262))
            .addComponent(jScrollPane1)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(261, 261, 261)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                        .addComponent(jTextField1)
                        .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGap(262, 262, 262)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap(325, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Check Out", jPanel3);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTable2.setModel(model2);
        jScrollPane2.setViewportView(jTable2);

        jButton3.setText("Show Borrowed Books");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Check In");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton8.setText("Pay Fine");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(186, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(147, 147, 147)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(194, 194, 194)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(164, 164, 164)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 15, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Check In", jPanel4);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setText("Last Name");

        jLabel5.setText("Card ID");

        jLabel6.setText("First Name");

        jButton5.setText("Display Info");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Delete Account");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel7.setText("Phone No");

        jLabel8.setText("Address");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(260, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(jButton6)))
                .addGap(263, 263, 263))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(261, 261, 261)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                        .addComponent(jTextField6)
                        .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGap(262, 262, 262)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField8)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap(325, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 795, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Delete Account", jPanel5);

        jButton7.setText("Logout");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 795, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel9Layout.createSequentialGroup()
                    .addGap(343, 343, 343)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(343, Short.MAX_VALUE)))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel9Layout.createSequentialGroup()
                    .addGap(219, 219, 219)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(220, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Logout", jPanel8);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int column;
        int flag = 0;
        Integer count = 0;
        conn = null;
        try {
            // Create a connection to the local MySQL server, with the "company" database selected.
            mongoclient = new MongoClient("Makubex-PC", 27017);
            DB db = mongoclient.getDB("library");
            DBCollection table = db.getCollection("book_loans");
            BasicDBObject document = new BasicDBObject();
            document.put("card_id", eno);
            DBCursor dbcursor = table.find(document);
            while (dbcursor.hasNext()) {
                BasicDBObject dbobject = (BasicDBObject) dbcursor.next();
                count++;
            }
            System.out.print("Count is " + count);
            if (count >= 3) {
                flag = 1;
            }
            System.out.println("Success!!");
        } catch (MongoException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        }
        if (flag == 1) {
            JOptionPane.showMessageDialog(null, "Can borrow maximum of 3 books! Limit reached!");
        } else {
            try {

                int selectedRow = jTable1.getSelectedRow();
                int rowCount = model1.getRowCount();
                int columnCount = model1.getColumnCount();
                for (column = 0; column < columnCount; column++) {
                    System.out.println(jTable1.getValueAt(selectedRow, column) + ", ");
                }
                book_id = (String) jTable1.getValueAt(selectedRow, 1);
                author_name = (String) jTable1.getValueAt(selectedRow, 2);
                available = (int) jTable1.getValueAt(selectedRow, columnCount - 1);

                System.out.println();
                if (available == 0) {
                    JOptionPane.showMessageDialog(null, "No copies available!!!");
                } else {
                    mongoclient = null;
                    available--;
                    try {
                        mongoclient = new MongoClient("Makubex-PC", 27017);
                        DB db = mongoclient.getDB("library");
                        DBCollection table1 = db.getCollection("books");
                        DBCollection table2 = db.getCollection("book_loans");
                        BasicDBObject document1 = new BasicDBObject();
                        document1.put("book_id", book_id);

                        BasicDBObject newDocument = new BasicDBObject();
                        newDocument.put("available", available);

                        BasicDBObject updateObj = new BasicDBObject();
                        updateObj.put("$set", newDocument);

                        table1.update(document1, updateObj);

                        BasicDBObject document2 = new BasicDBObject();
                        document2.put("book_id", book_id);
                        document2.put("card_id", eno.toString());
                        table2.insert(document2);
                        System.out.println("Success!!");
                    } catch (MongoException ex) {
                        System.out.println("Error in connection: " + ex.getMessage());
                    }
                }
            } catch (Exception e) {
            }
            try {
                // Create a connection to the local MySQL server, with the "company" database selected.
                mongoclient = new MongoClient("Makubex-PC", 27017);
                DB db = mongoclient.getDB("library");
                DBCollection table1 = db.getCollection("books");
                DBCollection table2 = db.getCollection("book_loans");
                DBCursor dbcursor;
                BasicDBObject regexQuery = new BasicDBObject();
                if (jTextField1.getText().length() != 0) {
                    regexQuery.put("book_id", new BasicDBObject("$regex", ".*" + jTextField1.getText() + ".*")
                            .append("$options", "i"));
                }
                if (jTextField2.getText().length() != 0) {
                    regexQuery.put("author_name", new BasicDBObject("$regex", ".*" + jTextField2.getText() + ".*")
                            .append("$options", "i"));
                }
                if (jTextField3.getText().length() != 0) {
                    regexQuery.put("title", new BasicDBObject("$regex", ".*" + jTextField3.getText() + ".*")
                            .append("$options", "i"));
                }
                if (jTextField1.getText().length() == 0 && jTextField2.getText().length() == 0 && jTextField3.getText().length() == 0) {
                    dbcursor = table1.find();
                } else {
                    dbcursor = table1.find(regexQuery);
                }
                for (int i = model1.getRowCount() - 1; i > -1; i--) {
                    model1.removeRow(i);
                }
                // Iterate through the result set.
                BasicDBObject dbobject;
                while (dbcursor.hasNext()) {
                    // Keep track of the line/tuple count
                    linect++;
                    dbobject = (BasicDBObject) dbcursor.next();
                    title = dbobject.getString("title");
                    book_id = dbobject.getString("book_id");
                    author_name = dbobject.getString("author_name");
                    no_of_copies = dbobject.getString("total");
                    available = dbobject.getInt("available");
                    model1.addRow(new Object[]{title, book_id, author_name, no_of_copies, available});
                    output = output + title + "\t" + book_id + "\t" + author_name + "\t" + no_of_copies + "\t" + available + "\n";
                    System.out.print(title);
                    System.out.print("\t");
                    System.out.print(book_id);
                    System.out.print("\t");
                    System.out.print(branch_id);
                    System.out.print("\t");
                    System.out.print(no_of_copies);
                    System.out.print("\t");
                    System.out.print(available);
                    System.out.print("\n");
                    System.out.println();

                } // End while(rs.next())
                // Always close the recordset and connection.                
                System.out.println("Success!!");
            } catch (MongoException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
            }
    }//GEN-LAST:event_jButton2ActionPerformed
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        conn = null;
        try {
            // Create a connection to the local MySQL server, with the "company" database selected.
            mongoclient = new MongoClient("Makubex-PC", 27017);
            DB db = mongoclient.getDB("library");
            DBCollection table = db.getCollection("books");
            DBCursor dbcursor;
            BasicDBObject regexQuery = new BasicDBObject();
            if (jTextField1.getText().length() != 0) {
                regexQuery.put("book_id", new BasicDBObject("$regex", ".*" + jTextField1.getText() + ".*")
                        .append("$options", "i"));
            }
            if (jTextField2.getText().length() != 0) {
                regexQuery.put("author_name", new BasicDBObject("$regex", ".*" + jTextField2.getText() + ".*")
                        .append("$options", "i"));
            }
            if (jTextField3.getText().length() != 0) {
                regexQuery.put("title", new BasicDBObject("$regex", ".*" + jTextField3.getText() + ".*")
                        .append("$options", "i"));
            }
            if (jTextField1.getText().length() == 0 && jTextField2.getText().length() == 0 && jTextField3.getText().length() == 0) {
                dbcursor = table.find();
            } else {
                dbcursor = table.find(regexQuery);
            }
            for (int i = model1.getRowCount() - 1; i > -1; i--) {
                model1.removeRow(i);
            }
            // Iterate through the result set.
            BasicDBObject dbobject;
            while (dbcursor.hasNext()) {
                // Keep track of the line/tuple count
                linect++;
                dbobject = (BasicDBObject) dbcursor.next();
                title = dbobject.getString("title");
                book_id = dbobject.getString("book_id");
                author_name = dbobject.getString("author_name");
                no_of_copies = dbobject.getString("total");
                available = dbobject.getInt("available");
                model1.addRow(new Object[]{title, book_id, author_name, no_of_copies, available});
                output = output + title + "\t" + book_id + "\t" + author_name + "\t" + no_of_copies + "\t" + available + "\n";
                System.out.print(title);
                System.out.print("\t");
                System.out.print(book_id);
                System.out.print("\t");
                System.out.print(author_name);
                System.out.print("\t");
                System.out.print(no_of_copies);
                System.out.print("\t");
                System.out.print(available);
                System.out.print("\n");
                System.out.println();

            }
            System.out.println("Success!!");
        } catch (MongoException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        conn = null;

        try {
            // Create a connection to the local MySQL server, with the "company" database selected.
            conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "root");

            Statement stmt = conn.createStatement();

            stmt.executeQuery("use library_project;");

            ResultSet rs = stmt.executeQuery("SELECT * FROM borrower;");
            // Iterate through the result set.
            while (rs.next()) {
                // Keep track of the line/tuple count

                card_no = rs.getString("card_no");
                fname = rs.getString("fname");
                lname = rs.getString("lname");
                address = rs.getString("address");
                phone = rs.getString("phone");
                if (card_no.equals(eno)) {
                    break;
                }

            }

            // End while(rs.next())
            // Always close the recordset and connection.
            rs.close();
            conn.close();

        } catch (SQLException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        }
        jTextField6.setText(card_no);
        jTextField4.setText(fname);
        jTextField5.setText(lname);
        jTextField7.setText(address);
        jTextField8.setText(phone);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        conn = null;
        int n = JOptionPane.showConfirmDialog(
                this,
                "Do you want to relinquish your membership?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION);
        if (n == 0) {

            try {
                // Create a connection to the local MySQL server, with the "company" database selected.
                conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "root");

                Statement stmt = conn.createStatement();

                stmt.executeQuery("use library_project;");
                stmt.executeUpdate("DELETE FROM borrower WHERE card_no=" + card_no + ";");
                stmt.executeUpdate("INSERT IGNORE INTO history values(\"" + card_no + "\",\"" + fname + "\",\"" + lname + "\",\"" + address + "\",\"" + phone + "\");");
                JOptionPane.showMessageDialog(null, "Successfully relinquished membership!");
                this.dispose();
            } catch (SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        int n = JOptionPane.showConfirmDialog(
                this,
                "Do you want to logout?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION);
        if (n == 0) {
            ThirdPage page3 = new ThirdPage();
            page3.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable2.getSelectedRow();
        String fine = "";
        conn = null;
        book_id = (String) jTable2.getValueAt(selectedRow, 0);
        title = (String) jTable2.getValueAt(selectedRow, 1);
        author_name = (String) jTable2.getValueAt(selectedRow, 2);
        model2.removeRow(jTable2.getSelectedRow());
        try {
            mongoclient = new MongoClient("Makubex-PC", 27017);
            DB db = mongoclient.getDB("library");
            DBCollection table1 = db.getCollection("book_loans");
            BasicDBObject document1 = new BasicDBObject();
            document1.put("card_id", eno);
            document1.put("book_id", book_id);
            table1.remove(document1);
            BasicDBObject document2 = new BasicDBObject();
            document2.put("book_id", book_id);
            DBCollection table2 = db.getCollection("books");
            DBCursor dbcursor = table2.find(document2);
            BasicDBObject dbobject;
            while (dbcursor.hasNext()) {
                // Keep track of the line/tuple count
                linect++;
                dbobject = (BasicDBObject) dbcursor.next();
                available = dbobject.getInt("available");
            }
            for (int i = model2.getRowCount() - 1; i > -1; i--) {
                model2.removeRow(i);
            }
            System.out.println("Success!!");
        } catch (MongoException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        }
        try {
            mongoclient = new MongoClient("Makubex-PC", 27017);
            DB db = mongoclient.getDB("library");
            DBCollection table = db.getCollection("books");
            DBCollection table2 = db.getCollection("book_loans");
            BasicDBObject document = new BasicDBObject();
            document.put("book_id", book_id);

            BasicDBObject newDocument = new BasicDBObject();
            available = available + 1;
            newDocument.put("available", available);

            BasicDBObject updateObj = new BasicDBObject();
            updateObj.put("$set", newDocument);
            table.update(document, updateObj);
            for (int i = model2.getRowCount() - 1; i > -1; i--) {
                model2.removeRow(i);
            }
            BasicDBObject documentx = new BasicDBObject();
            documentx.put("card_id", eno);
            DBCursor dbcursor = table2.find(documentx);
            BasicDBObject dbobject;
            while (dbcursor.hasNext()) {
                // Keep track of the line/tuple count
                linect++;
                dbobject = (BasicDBObject) dbcursor.next();

                book_id = dbobject.getString("book_id");
                BasicDBObject document2 = new BasicDBObject();
                document2.put("book_id", book_id);
                DBCursor dbcursor2 = table.find(document2);
                BasicDBObject dbobject2;
                while (dbcursor2.hasNext()) {
                    dbobject2 = (BasicDBObject) dbcursor2.next();
                    book_id = dbobject2.getString("book_id");
                    title = dbobject2.getString("title");
                    author_name = dbobject2.getString("author_name");
                    available = dbobject2.getInt("available");
                    
                    model2.addRow(new Object[]{book_id, title, author_name});
                    output = output + book_id + "\t" + title + "\t" + author_name + "\n";
                    System.out.print(book_id);
                    System.out.print("\t");
                    System.out.print(title);
                    System.out.print("\t");
                    System.out.print(author_name);
                    System.out.print("\n");
                    System.out.println();
                }
            }
        } catch (MongoException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String date_out = "", date_due = "", fine = "";
        String l_id = "";

        conn = null;
        try {
            // Create a connection to the local MySQL server, with the "company" database selected.
            mongoclient = new MongoClient("Makubex-PC", 27017);
            DB db = mongoclient.getDB("library");
            DBCollection table = db.getCollection("book_loans");
            BasicDBObject document = new BasicDBObject();
            document.put("card_id", eno);
            DBCursor dbcursor = table.find(document);
            BasicDBObject dbobject;
            for (int i = model2.getRowCount() - 1; i > -1; i--) {
                model2.removeRow(i);
            }
            while (dbcursor.hasNext()) {
                // Keep track of the line/tuple count
                linect++;
                dbobject = (BasicDBObject) dbcursor.next();
                card_id = dbobject.getString("card_id");
                book_id = dbobject.getString("book_id");

                DBCollection table2 = db.getCollection("books");
                BasicDBObject document2 = new BasicDBObject();
                document2.put("book_id", book_id);
                DBCursor dbcursor2 = table2.find(document2);
                BasicDBObject dbobject2;
                while (dbcursor2.hasNext()) {
                    dbobject2 = (BasicDBObject) dbcursor2.next();
                    book_id = dbobject2.getString("book_id");
                    title = dbobject2.getString("title");
                    author_name = dbobject2.getString("author_name");
                    available = dbobject2.getInt("available");
                    model2.addRow(new Object[]{book_id, title, author_name});
                    output = output + book_id + "\t" + title + "\t" + author_name + "\n";
                    System.out.print(book_id);
                    System.out.print("\t");
                    System.out.print(title);
                    System.out.print("\t");
                    System.out.print(author_name);
                    System.out.print("\n");
                    System.out.println();

                }

            }
            System.out.println("Success!!");
        } catch (MongoException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        String l_id = "";
        int selectedRow = jTable2.getSelectedRow();
        String fine = "";
        conn = null;
        fine = (String) jTable2.getValueAt(selectedRow, 5);
        if (Double.parseDouble(fine) > 0.0) {
            JOptionPane.showMessageDialog(null, "Fine Paid! Money debited from student's account!");
            fine = "0.0";

            String date_out = "", date_due = "";
            conn = null;
            try {
                // Create a connection to the local MySQL server, with the "company" database selected.
                conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "root");

                // Create a SQL statement object and execute the query.
                Statement stmt = conn.createStatement();

                stmt.executeQuery("use library_project;");

                ResultSet rs = stmt.executeQuery("SELECT * from book_loans NATURAL JOIN book NATURAL JOIN borrower WHERE card_no=" + eno + ";");
                for (int i = model2.getRowCount() - 1; i > -1; i--) {
                    model2.removeRow(i);
                }
                // Iterate through the result set.
                while (rs.next()) {
                    // Keep track of the line/tuple count
                    linect++;
                    book_id = rs.getString("book_id");
                    title = rs.getString("title");
                    branch_id = rs.getString("branch_id");
                    date_out = rs.getString("date_out");
                    date_due = rs.getString("due_date");
                    ResultSet rs1 = stmt.executeQuery("SELECT loan_id FROM book_loans where book_id=\"" + book_id + "\" AND branch_id=\"" + branch_id + "\";");
                    while (rs1.next()) {
                        l_id = rs1.getString("loan_id");
                    }
                    stmt.executeUpdate("UPDATE fines SET paid=0 WHERE loan_id=\"" + l_id + "\";");
                    model2.addRow(new Object[]{book_id, title, branch_id, date_out, date_due, fine});
                    output = output + book_id + "\t" + title + "\t" + branch_id + "\t" + date_out + "\t" + date_due + "\t" + fine + "\n";

                    System.out.print(book_id);
                    System.out.print("\t");
                    System.out.print(title);
                    System.out.print("\t");
                    System.out.print(branch_id);
                    System.out.print("\t");
                    System.out.print(date_out);
                    System.out.print("\t");
                    System.out.print(date_due);
                    System.out.print("\n");
                    System.out.println();

                } // End while(rs.next())
                // Always close the recordset and connection.
                rs.close();
                conn.close();
                System.out.println("Success!!");
            } catch (SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FourthPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FourthPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FourthPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FourthPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FourthPage("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
